// Generated by CoffeeScript 1.10.0

/*
  棋子单元格,坐标从左下角开始
 */

(function() {
  this.ChessCell = cc.Sprite.extend({
    mColorIndex: 0,
    mX: 0,
    mY: 0,
    mIsSelect: false,
    mSelectEffect: null,
    mScanState: false,
    ctor: function() {
      return this._super(resImg.cell);
    },
    setParams: function(colorIndex, x, y) {
      this.mColorIndex = colorIndex;
      this.mX = x;
      this.mY = y;
      this.initSize();
      return this.addInnerLove();
    },
    initSize: function() {
      this.ignoreAnchorPointForPosition(false);
      this.setAnchorPoint(cc.p(0, 0));
      this.setScale(Configs.mCellScale);
      this.setColor(Configs.mColors[this.mColorIndex]);
      return this.resetPosition();
    },
    addInnerLove: function() {
      var sprite;
      sprite = new cc.Sprite(resImg.little_love);
      sprite.setOpacity(150);
      sprite.setPosition(cc.p(this.width / 2, this.height / 2));
      return this.addChild(sprite, 0);
    },
    select: function() {
      this.mIsSelect = true;
      this.mSelectEffect = new cc.Sprite(resImg.halo);
      this.mSelectEffect.setScale(this.mSelectEffect.width / this.width);
      this.mSelectEffect.setPosition(cc.p(this.width / 2, this.height / 2));
      this.mSelectEffect.runAction(ActionManager.selectCellAction());
      return this.addChild(this.mSelectEffect, 0);
    },
    unselect: function() {
      if ((!this.mIsSelect) || (this.mSelectEffect == null)) {
        return false;
      }
      this.mSelectEffect.removeFromParent(true);
      return this.mIsSelect = false;
    },
    setXY: function(x, y) {
      this.mX = x;
      return this.mY = y;
    },
    getPoint: function() {
      return cc.p(this.mX, this.mY);
    },
    resetPosition: function() {
      var x, y;
      x = Configs.mBorderX + this.mX * (Configs.mCellWidth + Configs.mCellGap);
      y = Configs.mBorderY + this.mY * (Configs.mCellWidth + Configs.mCellGap);
      return this.setPosition(cc.p(x, y));
    },
    resetColor: function(colorIndex, isAction) {
      var action;
      if ((isAction != null) && isAction) {
        action = ActionManager.turnCellAction(Configs.mColors[colorIndex]);
        this.runAction(action);
      } else {
        this.setColor(Configs.mColors[colorIndex]);
      }
      return this.mColorIndex = colorIndex;
    }
  });

  this.ChessCell.create = function(colorIndex, x, y) {
    var chessCell;
    chessCell = new ChessCell();
    chessCell.setParams(colorIndex, x, y);
    return chessCell;
  };

}).call(this);

//# sourceMappingURL=ChessCell.js.map
