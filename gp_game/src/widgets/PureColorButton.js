// Generated by CoffeeScript 1.10.0

/*
  自定义纯颜色按钮控件
 */

(function() {
  this.PureColorButton = cc.Node.extend({
    mLayerColor: null,
    mSize: cc.p(230, 75),
    mNormalColor: cc.color(255, 54, 54),
    mSelectColor: null,
    mDisableColor: cc.color(79, 79, 79),
    mIsEnable: true,
    mTitleText: "",
    mTitleLabel: null,
    mFontColor: cc.color(255, 255, 255),
    mFontSize: 35,
    mCallback: null,
    ctor: function(param) {
      this._super();
      this.ignoreAnchorPointForPosition(false);
      this.initParam(param);
      this.setContentSize(this.mSize.x, this.mSize.y);
      this.addColorLayer();
      this.addBtnTitle();
      return this.onListener();
    },
    initParam: function(param) {
      if (ccUtil.isObjectNotNull(param)) {
        if (ccUtil.isObjectNotNull(param.normal)) {
          this.mNormalColor = param.normal;
        }
        if (ccUtil.isObjectNotNull(param.select)) {
          this.mSelectColor = param.select;
        }
        if (ccUtil.isObjectNotNull(param.disable)) {
          this.mDisableColor = param.disable;
        }
        if (ccUtil.isObjectNotNull(param.title)) {
          this.mTitleText = param.title;
        }
        if (ccUtil.isObjectNotNull(param.enable)) {
          this.mIsEnable = param.enable;
        }
        if (ccUtil.isObjectNotNull(param.size)) {
          this.mSize = param.size;
        }
        if (ccUtil.isObjectNotNull(param.callback)) {
          this.mCallback = param.callback;
        }
        if (ccUtil.isObjectNotNull(param.fontColor)) {
          this.mFontColor = param.fontColor;
        }
        if (ccUtil.isObjectNotNull(param.fontSize)) {
          this.mFontSize = param.fontSize;
        }
      }
      if (this.mSelectColor == null) {
        return this.mSelectColor = this.mNormalColor;
      }
    },
    addColorLayer: function() {
      this.mLayerColor = new cc.LayerColor(this.mNormalColor);
      this.mLayerColor.ignoreAnchorPointForPosition(false);
      if (!this.mIsEnable) {
        this.mLayerColor.setColor(this.mDisableColor);
      }
      this.mLayerColor.attr({
        anchorX: 0.5,
        anchorY: 0.5,
        width: this.mSize.x,
        height: this.mSize.y,
        x: this.width / 2,
        y: this.height / 2
      });
      return this.addChild(this.mLayerColor, 0);
    },
    addBtnTitle: function() {
      this.mTitleLabel = new cc.LabelTTF(this.mTitleText);
      this.mTitleLabel.attr({
        anchorX: 0.5,
        anchorY: 0.5,
        x: this.mLayerColor.width / 2,
        y: this.mLayerColor.height / 2,
        fontSize: this.mFontSize,
        fillStyle: this.mFontColor
      });
      return this.mLayerColor.addChild(this.mTitleLabel, 0);
    },
    onListener: function() {
      var listener, self;
      self = this;
      listener = cc.EventListener.create({
        event: cc.EventListener.TOUCH_ONE_BY_ONE,
        swallowTouches: true,
        onTouchBegan: function(touch, event) {
          var locationInNode, rect, s, target;
          if (!self.mIsEnable) {
            return false;
          }
          target = event.getCurrentTarget();
          locationInNode = target.convertToNodeSpace(touch.getLocation());
          s = target.getContentSize();
          rect = cc.rect(0, 0, s.width, s.height);
          if (cc.rectContainsPoint(rect, locationInNode)) {
            self.mLayerColor.setColor(self.mSelectColor);
            return true;
          } else {
            return false;
          }
        },
        onTouchMoved: function(touch, event) {},
        onTouchEnded: function(touch, event) {
          if (self.mCallback != null) {
            self.mCallback();
          }
          return self.mLayerColor.setColor(self.mNormalColor);
        }
      });
      return cc.eventManager.addListener(listener, this.mLayerColor);
    },
    setCallBack: function(cb) {
      return this.mCallback = cb;
    }
  });

}).call(this);

//# sourceMappingURL=PureColorButton.js.map
