// Generated by CoffeeScript 1.10.0

/*
  bmob后台数据存储工具类
   * 创建道具属性数据库表，Props(props_id, price, name, description)（道具ID， 价格， 名字， 描述），道具ID：0--魔术棒，1--回退一步， 2--增加5步
   * 创建道具数量数据库表， PropsSum(user_id, props_id, sum)（用户ID， 道具ID，数量）
   * 创建用户信息数据库表， User(user_id, channel_id, coin)（用户ID， 渠道ID， 金币总数， 拥有道具数量）
   * 创建记录成绩数据库表， Score(user_id, level, highest_score, win_times, fail_times)（关卡， 最高成绩， 通关次数，失败次数）
 */

(function() {
  Bmob.initialize(Keys.BMOB_APPLICATION_ID, Keys.BMOB_REST_API_KEY);

  this.BmobHelper = {
    USER_TABLE: "UserTable",
    USER_ID: "user_id",
    CHANNEL_ID: "channel_id",
    COIN: "coin",
    PROPS_TABLE: "Props",
    PROPS_ID: "props_id",
    PRICE: "price",
    DESCRIPTION: "description",
    SCORE_TABLE: "Score",
    LEVEL: "level",
    HIGHEST_SCORE: "highest_score",
    WIN_TIMES: "win_times",
    FAIL_TIMES: "fail_times",
    PROPS_SUM_TABLE: "PropsSum",
    PROPS_SUM: "sum",
    addUser: function(userId, channelId) {
      var User, query, self;
      channelId = channelId.toString();
      User = Bmob.Object.extend(this.USER_TABLE);
      query = new Bmob.Query(User);
      query.equalTo(this.USER_ID, userId);
      self = this;
      return query.find().then(function(users) {
        jlog.i("query sucess");
        jlog.cc(users);
        if (users.length === 0) {
          return self.addNewUser(userId, channelId);
        } else {
          users[0].set(this.CHANNEL_ID, channelId);
          return users[0].save();
        }
      }, function(error) {
        jlog.i("query fail");
        return self.addNewUser(userId, channelId);
      });
    },
    addNewUser: function(userId, channelId) {
      var User, user;
      User = Bmob.Object.extend(this.USER_TABLE);
      user = new User();
      user.set(this.USER_ID, userId);
      user.set(this.CHANNEL_ID, channelId);
      user.set(this.COIN, 0);
      return user.save().then(function(data) {
        jlog.i("User data id " + data.id);
        return jlog.cc(data);
      }, function(error) {
        jlog.i("add data error " + error);
        return jlog.cc(error);
      });
    },
    getPropsSum: function(userId, propsId) {
      var UserProps, query, self, sum;
      sum = 0;
      self = this;
      UserProps = Bmob.Object.extend(this.PROPS_SUM_TABLE);
      query = new Bmob.Query(UserProps);
      query.equalTo(this.USER_ID, userId);
      query.equalTo(this.PROPS_ID, propsId);
      query.find().then(function(results) {
        if (results.length > 0) {
          return sum = results[0].get(self.PROPS_SUM);
        }
      }, function(error) {
        return jlog.cc(error);
      });
      return sum;
    },
    buyProps: function(userId, propsId, sum) {
      var UserProps, query, self;
      self = this;
      UserProps = Bmob.Object.extend(this.PROPS_SUM_TABLE);
      query = new Bmob.Query(UserProps);
      query.equalTo(this.USER_ID, userId);
      query.equalTo(this.PROPS_ID, propsId);
      return query.find().then(function(results) {
        var _sum;
        jlog.cc(results);
        if (results.length > 0) {
          _sum = results[0].get(self.PROPS_SUM);
          jlog.cc(results[0].get(self.PROPS_SUM));
          sum += _sum;
          jlog.i("sum = " + sum);
          results[0].set(self.PROPS_SUM, sum);
          return results[0].save();
        } else {
          return self.addNewPropsSum(userId, propsId, sum);
        }
      }, function(error) {
        return self.addNewPropsSum(userId, propsId, sum);
      });
    },
    addNewPropsSum: function(userId, propsId, sum) {
      var UserProps, userProps;
      UserProps = Bmob.Object.extend(this.PROPS_SUM_TABLE);
      userProps = new UserProps();
      jlog.cc(userId);
      userProps.set(this.USER_ID, userId);
      userProps.set(this.PROPS_ID, propsId);
      userProps.set(this.PROPS_SUM, sum);
      return userProps.save().then(function(results) {
        return jlog.cc(results);
      }, function(error) {
        return jlog.cc(error);
      });
    },
    saveGameWin: function(userId, level, score) {
      var Score, query, self;
      self = this;
      Score = Bmob.Object.extend(this.SCORE_TABLE);
      query = new Bmob.Query(Score);
      query.equalTo(this.USER_ID, userId);
      query.equalTo(this.LEVEL, level);
      return query.find().then(function(results) {
        var highScore, winTime;
        if (results.length > 0) {
          winTime = results[0].get(self.WIN_TIMES) + 1;
          results[0].set(self.WIN_TIMES, winTime);
          highScore = results[0].get(self.HIGHEST_SCORE);
          if (highScore < score) {
            results[0].set(self.HIGHEST_SCORE, score);
          }
          return results[0].save();
        } else {
          return self.addNewLevelScore(userId, level, score, true);
        }
      }, function(error) {
        return self.addNewLevelScore(userId, level, score, true);
      });
    },
    saveGameFail: function(userId, level, score) {
      var Score, query, self;
      self = this;
      Score = Bmob.Object.extend(this.SCORE_TABLE);
      query = new Bmob.Query(Score);
      query.equalTo(this.USER_ID, userId);
      query.equalTo(this.LEVEL, level);
      return query.find().then(function(results) {
        var fail;
        if (results.length > 0) {
          fail = results[0].get(self.FAIL_TIMES) + 1;
          results[0].set(self.FAIL_TIMES, fail);
          return results[0].save();
        } else {
          return self.addNewLevelScore(userId, level, score, false);
        }
      }, function(error) {
        return self.addNewLevelScore(userId, level, score, false);
      });
    },
    addNewLevelScore: function(userId, level, score, isWin) {
      var Score, scoreTable;
      jlog.i("userId = " + userId + "    ;   level = " + level);
      Score = Bmob.Object.extend(this.SCORE_TABLE);
      scoreTable = new Score();
      scoreTable.set(this.USER_ID, userId);
      scoreTable.set(this.LEVEL, level);
      scoreTable.set(this.HIGHEST_SCORE, score);
      if (isWin) {
        scoreTable.set(this.WIN_TIMES, 1);
        scoreTable.set(this.FAIL_TIMES, 0);
      } else {
        scoreTable.set(this.WIN_TIMES, 0);
        scoreTable.set(this.FAIL_TIMES, 1);
      }
      return scoreTable.save().then(function(result) {
        return jlog.cc(result);
      }, function(error) {
        return jlog.cc(error);
      });
    },
    getLevelHighestScore: function(userId, callback) {
      var Score, array, query, self;
      array = null;
      self = this;
      Score = Bmob.Object.extend(this.SCORE_TABLE);
      query = new Bmob.Query(Score);
      query.equalTo(this.USER_ID, userId);
      query.select(this.LEVEL, this.HIGHEST_SCORE);
      query.descending(this.LEVEL);
      return query.find().then(function(results) {
        var i, len, level, result, score;
        array = [];
        for (i = 0, len = results.length; i < len; i++) {
          result = results[i];
          level = result.get(self.LEVEL);
          score = result.get(self.HIGHEST_SCORE);
          array[level - 1] = score;
        }
        return callback(array);
      }, function(error) {
        jlog.cc(error);
        return array = null;
      });
    }
  };

}).call(this);

//# sourceMappingURL=BmobHelper.js.map
