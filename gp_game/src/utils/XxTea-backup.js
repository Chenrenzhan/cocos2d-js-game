// Generated by CoffeeScript 1.10.0

/*
  XXTea加密算法
 */

(function() {
  this.XxTea = {
    long2str: function(v, w) {
      var i, j, m, n, ref, vl;
      vl = v.length;
      n = (vl - 1) << 2;
      if (w) {
        m = v[vl - 1];
        if ((m < n - 3) || (m > n)) {
          return null;
        }
        n = m;
      }
      for (i = j = 0, ref = vl; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        v[i] = String.fromCharCode(v[i] & 0xff, v[i] >>> 8 & 0xff, v[i] >>> 16 & 0xff, v[i] >>> 24 & 0xff);
      }
      if (w) {
        return v.join('').substring(0, n);
      } else {
        return v.join('');
      }
    },
    str2long: function(s, w) {
      var i, len, v;
      len = s.length;
      v = [];
      i = 0;
      while (i < len) {
        v[i >> 2] = s.charCodeAt(i) | s.charCodeAt(i + 1) << 8 | s.charCodeAt(i + 2) << 16 | s.charCodeAt(i + 3) << 24;
        i += 4;
      }
      if (w) {
        v[v.length] = len;
      }
      return v;
    },
    encrypt: function(str, key) {
      var delta, e, j, k, mx, n, p, q, ref, sum, v, y, z;
      if ((str != null) || str === "") {
        return "";
      }
      v = this.str2long(str, true);
      k = this.str2long(key, false);
      if (k.length < 4) {
        k.length = 4;
      }
      n = v.length - 1;
      z = v[n];
      y = v[0];
      delta = 0x9E3779B9;
      mx;
      e;
      p;
      q = Math.floor(6 + 52 / (n + 1));
      sum = 0;
      while (0 < q--) {
        sum = sum + delta & 0xffffffff;
        e = sum >>> 2 & 3;
        for (p = j = 0, ref = n; 0 <= ref ? j < ref : j > ref; p = 0 <= ref ? ++j : --j) {
          y = v[p + 1];
          mx = (z >>> 5 ^ y << 2) + (y >>> 3 ^ z << 4) ^ (sum ^ y) + (k[p & 3 ^ e] ^ z);
          z = v[p] = v[p] + mx & 0xffffffff;
        }
        y = v[0];
        mx = (z >>> 5 ^ y << 2) + (y >>> 3 ^ z << 4) ^ (sum ^ y) + (k[p & 3 ^ e] ^ z);
        z = v[n] = v[n] + mx & 0xffffffff;
      }
      return this.long2str(v, false);
    },
    decrypt: function(str, key) {
      var delta, e, j, k, mx, n, p, q, ref, sum, v, y, z;
      if ((str != null) || str === "") {
        return "";
      }
      v = this.str2long(str, false);
      k = this.str2long(key, false);
      if (k.length < 4) {
        k.length = 4;
      }
      n = v.length - 1;
      z = v[n - 1];
      y = v[0];
      delta = 0x9E3779B9;
      mx;
      e;
      p;
      q = Math.floor(6 + 52 / (n + 1));
      sum = q * delta & 0xffffffff;
      while (sum !== 0) {
        e = sum >>> 2 & 3;
        for (p = j = ref = n; ref <= 0 ? j < 0 : j > 0; p = ref <= 0 ? ++j : --j) {
          z = v[p - 1];
          mx = (z >>> 5 ^ y << 2) + (y >>> 3 ^ z << 4) ^ (sum ^ y) + (k[p & 3 ^ e] ^ z);
          y = v[p] = v[p] - mx & 0xffffffff;
        }
      }
      z = v[n];
      mx = (z >>> 5 ^ y << 2) + (y >>> 3 ^ z << 4) ^ (sum ^ y) + (k[p & 3 ^ e] ^ z);
      y = v[0] = v[0] - mx & 0xffffffff;
      sum = sum - delta & 0xffffffff;
      return this.long2str(v, true);
    }
  };

}).call(this);

//# sourceMappingURL=XxTea-backup.js.map
