// Generated by CoffeeScript 1.10.0

/*
  游戏主界面
 */

(function() {
  var MainLayer;

  MainLayer = LayerBase.extend({
    mScrollView: null,
    mBtnSettings: null,
    mLastOpenLevel: 1,
    mMenuLayerHeight: 140,
    mMenuLayer: null,
    mBtnExit: null,
    ctor: function() {
      var i, j, results;
      this._super();
      this.mCurLevel = DataUtil.getDataItem(Keys.CURRENT_LEVEL, 0);
      this.addMenuLayer();
      this.addBtnFriend();
      this.addBtnSettings();
      this.addBtnExitGame();
      this.initScrollView();
      this.addVerticalLine(1);
      this.addVerticalLine(2);
      this.addVerticalLine(3);
      results = [];
      for (i = j = 1; j <= 50; i = ++j) {
        results.push(this.addLevelCard(i));
      }
      return results;
    },
    addMenuLayer: function() {
      this.mMenuLayer = new cc.LayerColor(cc.color(168, 132, 174, 255));
      this.mMenuLayer.ignoreAnchorPointForPosition(false);
      this.mMenuLayer.attr({
        width: cc.winSize.width,
        height: this.mMenuLayerHeight,
        anchorX: 0.5,
        anchorY: 0,
        x: cc.winSize.width / 2,
        y: 0
      });
      this.addChild(this.mMenuLayer, 5);
      return TouchUtil.onClick(this.mMenuLayer, function() {
        return false;
      });
    },
    addBtnSettings: function() {
      var btn, self;
      btn = new ccui.Button();
      btn.loadTextureNormal(resImg.settings, ccui.Widget.LOCAL_TEXTURE);
      btn.setPressedActionEnabled(true);
      btn.setTouchEnabled(true);
      btn.attr({
        anchorX: 0,
        anchorY: 0.5,
        x: 50,
        y: this.mMenuLayer.height / 2
      });
      this.mMenuLayer.addChild(btn, 5);
      self = this;
      return btn.addTouchEventListener(function(touch, event) {
        var settingsDialog;
        if (event === ccui.Widget.TOUCH_ENDED) {
          AudioManager.playClickAudio();
          jlog.i("设置按钮点击回调");
          settingsDialog = new SettingsDialog();
          self.addChild(settingsDialog, 2000);
          return jlog.i("settingsDialog   =  " + settingsDialog.getLocalZOrder());
        }
      }, btn);
    },
    addBtnFriend: function() {
      var btn;
      btn = new ccui.Button();
      btn.loadTextureNormal(resImg.friend, ccui.Widget.LOCAL_TEXTURE);
      btn.setPressedActionEnabled(true);
      btn.setTouchEnabled(true);
      btn.attr({
        anchorX: 0.5,
        anchorY: 0.5,
        x: this.mMenuLayer.width / 2,
        y: this.mMenuLayer.height / 2
      });
      this.mMenuLayer.addChild(btn, 5);
      return btn.addTouchEventListener(function(touch, event) {
        if (event === ccui.Widget.TOUCH_ENDED) {
          AudioManager.playClickAudio();
          jlog.i("QQ登录");
          if (ccUtil.isAndroid()) {
            jsb.reflection.callStaticMethod(Configs.mAndroidPackageName + "/YSDKHelper", "loginQQ", "()V");
            return jsb.reflection.callStaticMethod(Configs.mAndroidPackageName + "/YSDKHelper", "queryUserInfo", "()V");
          }
        }
      }, btn);
    },
    addBtnExitGame: function() {
      var btn, self;
      btn = new ccui.Button();
      btn.loadTextureNormal(resImg.exit_game, ccui.Widget.LOCAL_TEXTURE);
      btn.setPressedActionEnabled(true);
      btn.setTouchEnabled(true);
      btn.attr({
        anchorX: 1.0,
        anchorY: 0.5,
        x: this.mMenuLayer.width - 50,
        y: this.mMenuLayer.height / 2
      });
      this.mMenuLayer.addChild(btn, 5);
      self = this;
      return btn.addTouchEventListener(function(touch, event) {
        var confirm;
        if (event === ccui.Widget.TOUCH_ENDED) {
          AudioManager.playClickAudio();
          confirm = new ConfirmExitDialog();
          self.addChild(confirm, 20);
          return DataUtil.saveData();
        }
      }, btn);
    },
    initScrollView: function() {
      var bigLevels, i, j, layer, percent, ref, results, self, size, sprite;
      self = this;
      this.mScrollView = new ccui.ScrollView();
      this.mScrollView.setDirection(ccui.ScrollView.DIR_VERTICAL);
      if (ccUtil.isNative()) {
        this.mScrollView.setScrollBarEnabled(false);
      }
      this.mScrollView.setInertiaScrollEnabled(true);
      this.mScrollView.setTouchEnabled(true);
      this.mScrollView.setContentSize(cc.size(cc.winSize.width, cc.winSize.height - this.mMenuLayerHeight));
      this.mScrollView.setInnerContainerSize(cc.size(cc.winSize.width, (cc.winSize.height - this.mMenuLayerHeight) * 5));
      this.mScrollView.attr({
        anchorX: 0.5,
        anchorY: 1,
        x: cc.winSize.width / 2,
        y: cc.winSize.height
      });
      percent = 100 - this.mCurLevel / 50 * 100;
      this.mScrollView.scrollToPercentVertical(percent, 2, false);
      this.addChild(this.mScrollView, 0);
      bigLevels = Configs.mSettings[Keys.LEVELS];
      size = this.mScrollView.getContentSize();
      results = [];
      for (i = j = 0, ref = bigLevels.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        layer = new cc.LayerColor(bigLevels[i].colors[0]);
        layer.ignoreAnchorPointForPosition(false);
        layer.setContentSize(size);
        layer.attr({
          x: cc.winSize.width / 2,
          y: (cc.winSize.height - this.mMenuLayerHeight) * (i + 0.5)
        });
        sprite = new cc.Sprite(resImg.logo);
        sprite.attr({
          x: layer.width / 2,
          y: layer.height / 2
        });
        layer.addChild(sprite, 0);
        results.push(this.mScrollView.addChild(layer, 0));
      }
      return results;
    },
    addVerticalLine: function(index) {
      var line;
      line = new cc.LayerColor(cc.color(255, 255, 255, 120));
      line.ignoreAnchorPointForPosition(false);
      line.attr({
        width: 20,
        height: this.mScrollView.innerHeight,
        anchorX: 0.5,
        anchorY: 0,
        x: this.mScrollView.width / 4 * index,
        y: 0
      });
      return this.mScrollView.addChild(line, 0);
    },
    addLevelCard: function(level) {
      var levelCard, line, scores, x, y;
      levelCard = new LevelCard(this.getColor(level), level);
      scores = Configs.mData[Keys.LEVEL_HIGHEST_SCORE];
      if (level <= this.mCurLevel) {
        levelCard.openLevel(true);
        levelCard.setScore(scores[level - 1]);
        levelCard.setOnClickCallback(this.onStartGame);
      } else if (this.mCurLevel === (level - 1)) {
        levelCard.nextOpenLevel();
        levelCard.setOnClickCallback(this.onStartGame);
      } else {
        levelCard.openLevel(false);
      }
      line = level % 4;
      switch (line) {
        case 0:
          line = 2;
          break;
        case 2:
          line = 2;
          break;
        case 1:
          line = 3;
          break;
        case 3:
          line = 1;
      }
      x = cc.winSize.width / 4 * line;
      y = levelCard.height * (level - 1) + levelCard.height / 2;
      levelCard.attr({
        x: x,
        y: y
      });
      return this.mScrollView.addChild(levelCard, 5);
    },
    getColor: function(level) {
      var bigLevel, color, index, sLevel;
      level = level - 1;
      bigLevel = Math.floor(level / 10);
      sLevel = level % 10;
      index = sLevel % 5 + 1;
      color = Configs.mSettings[Keys.LEVELS][bigLevel][Keys.COLORS][index];
      return color;
    },
    onStartGame: function(level) {
      var playScene;
      AudioManager.playStartGameAudio();
      playScene = new PlayingGameScene(level);
      return cc.director.runScene(playScene);
    }
  });

  this.MainScene = cc.Scene.extend({
    onEnter: function() {
      var layer;
      this._super();
      layer = new MainLayer();
      this.addChild(layer);
      return AudioManager.initBgm();
    }
  });

}).call(this);

//# sourceMappingURL=MainScene.js.map
