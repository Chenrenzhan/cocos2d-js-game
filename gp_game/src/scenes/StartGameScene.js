// Generated by CoffeeScript 1.10.0
(function() {
  var MainLayer;

  MainLayer = cc.LayerColor.extend({
    mCurLevel: 0,
    mLevel: 0,
    mType: 0,
    mTypeColor: [cc.color(225, 82, 88), cc.color(225, 82, 88), cc.color(179, 212, 101)],
    mTypeImg: [resImg.win_cat, resImg.win_cat, resImg.lose_cat],
    mFontColor: cc.color(255, 226, 138),
    mScore: Configs.mData[Keys.LEVEL_HIGHEST_SCORE],
    ctor: function(level, type, score) {
      this._super(this.mTypeColor[type]);
      this.mCurLevel = DataUtil.getDataItem(Keys.CURRENT_LEVEL, 0);
      this.mLevel = level;
      jlog.i("@mCurLevel = " + this.mCurLevel + " ;   @mLevel = " + this.mLevel);
      jlog.i(" isWin  = " + type);
      this.mType = type;
      this.mScore = score;
      this.addBack();
      this.addLevel();
      this.addScoreLabel();
      this.addStates();
      this.addBtn();
      return this.addShare();
    },
    addBack: function() {
      var layer, sprite;
      layer = new cc.LayerColor(cc.color(73, 124, 189));
      layer.ignoreAnchorPointForPosition(false);
      layer.attr({
        anchorX: 0.5,
        anchorY: 1,
        width: cc.winSize.width,
        height: 90,
        x: cc.winSize.width / 2,
        y: cc.winSize.height
      });
      this.addChild(layer, 0);
      sprite = new cc.Sprite(resImg.close_white);
      sprite.attr({
        x: layer.width / 2,
        y: layer.height / 2
      });
      layer.addChild(sprite, 0);
      return TouchUtil.onClick(layer, function() {
        return cc.director.runScene(new MainScene1());
      });
    },
    addLevel: function() {
      var bigLabel, bigLevel, levelLabel;
      bigLevel = Math.floor((this.mLevel - 1) / 5);
      bigLabel = new cc.LabelTTF(Configs.mStyle[bigLevel]);
      bigLabel.attr({
        fontSize: 50,
        fillStyle: this.mFontColor,
        x: cc.winSize.width / 2,
        y: cc.winSize.height - 150
      });
      this.addChild(bigLabel, 0);
      levelLabel = new cc.LabelTTF(this.mLevel.toString());
      levelLabel.attr({
        fontSize: 50,
        fillStyle: this.mFontColor,
        x: cc.winSize.width / 2,
        y: bigLabel.y - bigLabel.height - 20
      });
      return this.addChild(levelLabel, 0);
    },
    addScoreLabel: function() {
      var label, score;
      score = this.mScore;
      if (score == null) {
        score = 0;
      }
      label = new cc.LabelTTF(score.toString());
      label.attr({
        fontSize: 160,
        fillStyle: this.mFontColor,
        x: cc.winSize.width / 2,
        y: cc.winSize.height - 350
      });
      return this.addChild(label, 0);
    },
    addStates: function() {
      var sprite;
      sprite = new cc.Sprite(this.mTypeImg[this.mType]);
      sprite.attr({
        x: cc.winSize.width / 2,
        y: cc.winSize.height / 2 + 80
      });
      return this.addChild(sprite, 0);
    },
    addBtn: function() {
      var layer, next, nextLabel, self, start, startLabel;
      layer = new cc.LayerColor(cc.color(73, 124, 189));
      layer.ignoreAnchorPointForPosition(false);
      layer.attr({
        width: cc.winSize.width,
        height: 200,
        x: cc.winSize.width / 2,
        y: 440
      });
      this.addChild(layer, 0);
      jlog.i("@@mType  =  " + this.mType);
      if (this.mLevel <= this.mCurLevel || (this.mType === 1)) {
        start = new cc.Sprite(resImg.start);
        start.attr({
          x: cc.winSize.width / 3,
          y: layer.height / 2 + 20
        });
        layer.addChild(start);
        startLabel = new cc.LabelTTF("开始");
        startLabel.attr({
          fontSize: 30,
          fillStyle: this.mFontColor,
          x: start.x,
          y: layer.height / 2 - 40
        });
        layer.addChild(startLabel);
        next = new cc.Sprite(resImg.next_level);
        next.attr({
          x: cc.winSize.width / 3 * 2,
          y: layer.height / 2 + 20
        });
        layer.addChild(next);
        nextLabel = new cc.LabelTTF("下一关");
        nextLabel.attr({
          fontSize: 30,
          fillStyle: this.mFontColor,
          x: next.x,
          y: layer.height / 2 - 40
        });
        layer.addChild(nextLabel);
        self = this;
        TouchUtil.onClick(next, function(target) {
          return self.onStartGame(self.mLevel + 1);
        });
        TouchUtil.onClick(nextLabel, function(target) {
          return self.onStartGame(self.mLevel + 1);
        });
      } else {
        start = new cc.Sprite(resImg.start);
        start.attr({
          x: cc.winSize.width / 2,
          y: layer.height / 2 + 20
        });
        layer.addChild(start);
        startLabel = new cc.LabelTTF("开始");
        startLabel.attr({
          fontSize: 30,
          fillStyle: this.mFontColor,
          x: start.x,
          y: layer.height / 2 - 40
        });
        layer.addChild(startLabel);
      }
      self = this;
      TouchUtil.onClick(start, function(target) {
        return self.onStartGame(self.mLevel);
      });
      return TouchUtil.onClick(startLabel, function(target) {
        return self.onStartGame(self.mLevel);
      });
    },
    addShare: function() {
      var qq, qqLabel, weixin, weixinLabel;
      weixin = new cc.Sprite(resImg.weixin);
      weixin.attr({
        x: cc.winSize.width / 3 * 2,
        y: 200
      });
      this.addChild(weixin);
      weixinLabel = new cc.LabelTTF("朋友圈");
      weixinLabel.attr({
        fontSize: 30,
        fillStyle: this.mFontColor,
        x: weixin.x,
        y: 100
      });
      this.addChild(weixinLabel);
      qq = new cc.Sprite(resImg.qq);
      qq.attr({
        x: cc.winSize.width / 3,
        y: 200
      });
      this.addChild(qq);
      qqLabel = new cc.LabelTTF("QQ");
      qqLabel.attr({
        fontSize: 30,
        fillStyle: this.mFontColor,
        x: qq.x,
        y: 100
      });
      return this.addChild(qqLabel);
    },
    onStartGame: function(level) {
      var playScene;
      AudioManager.playStartGameAudio();
      playScene = new PlayingGameScene(level);
      return cc.director.runScene(playScene);
    }
  });

  this.StartGameScene = cc.Scene.extend({
    mLevel: 0,
    mType: 0,
    mScore: 0,
    ctor: function(level, type, score) {
      var scores;
      this._super();
      this.mLevel = level;
      this.mType = type;
      if (score != null) {
        return this.mScore = score;
      } else {
        scores = Configs.mData[Keys.LEVEL_HIGHEST_SCORE];
        return this.mScore = scores != null ? scores[level - 1] : 0;
      }
    },
    onEnter: function() {
      var layer;
      this._super();
      layer = new MainLayer(this.mLevel, this.mType, this.mScore);
      return this.addChild(layer);
    }
  });

}).call(this);

//# sourceMappingURL=StartGameScene.js.map
